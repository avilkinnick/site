// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
function showPage(pageId) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });

    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.getElementById(pageId).classList.add('active');

    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É
    const targetLink = document.querySelector(`[href="#${pageId}"]`);
    if (targetLink) {
        targetLink.classList.add('active');
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É
    window.scrollTo(0, 0);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('.nav-link').forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        const pageId = link.getAttribute('href').substring(1);
        showPage(pageId);
    });
});

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
const loginBtn = document.getElementById('loginBtn');
const registerBtn = document.getElementById('registerBtn');
const loginModal = document.getElementById('loginModal');
const registerModal = document.getElementById('registerModal');
const closeButtons = document.querySelectorAll('.close');
const switchToRegister = document.getElementById('switchToRegister');
const switchToLogin = document.getElementById('switchToLogin');

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
loginBtn.addEventListener('click', () => {
    loginModal.style.display = 'block';
});

registerBtn.addEventListener('click', () => {
    registerModal.style.display = 'block';
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
switchToRegister?.addEventListener('click', (e) => {
    e.preventDefault();
    loginModal.style.display = 'none';
    registerModal.style.display = 'block';
});

switchToLogin?.addEventListener('click', (e) => {
    e.preventDefault();
    registerModal.style.display = 'none';
    loginModal.style.display = 'block';
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
closeButtons.forEach(button => {
    button.addEventListener('click', () => {
        loginModal.style.display = 'none';
        registerModal.style.display = 'none';
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
window.addEventListener('click', (e) => {
    if (e.target === loginModal) {
        loginModal.style.display = 'none';
    }
    if (e.target === registerModal) {
        registerModal.style.display = 'none';
    }
});

// –§–æ—Ä–º—ã
document.getElementById('loginForm').addEventListener('submit', (e) => {
    e.preventDefault();
    simulateAPICall('login').then(() => {
        alert('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        loginModal.style.display = 'none';
        updateUserInterface('–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', 'ivan@example.com');
    });
});

document.getElementById('registerForm').addEventListener('submit', (e) => {
    e.preventDefault();
    simulateAPICall('register').then(() => {
        alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.');
        registerModal.style.display = 'none';
    });
});

// –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
function simulateAPICall(action) {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log(`${action} API call simulated`);
            resolve();
        }, 1000);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInterface(name, email) {
    document.getElementById('userName').textContent = name;
    document.getElementById('userEmail').textContent = email;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.querySelectorAll('.user-stat .stat-value').forEach(stat => {
        stat.textContent = Math.floor(Math.random() * 50) + 10;
    });
}

// –ò–≥—Ä–∞ "–û–≥–æ–Ω—å –∏ –í–æ–¥–∞"
function playGame() {
    const gameWindow = window.open('', '_blank', 'width=800,height=600');
    if (gameWindow) {
        gameWindow.document.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>–û–≥–æ–Ω—å –∏ –í–æ–¥–∞ - –ó–∞–≥—Ä—É–∑–∫–∞</title>
                <style>
                    body {
                        margin: 0;
                        padding: 0;
                        background: linear-gradient(135deg, #ff6b35, #4ecdc4);
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                        font-family: Arial, sans-serif;
                        color: white;
                    }
                    .loading-container {
                        text-align: center;
                    }
                    .loading-icon {
                        font-size: 4rem;
                        margin-bottom: 1rem;
                    }
                </style>
            </head>
            <body>
                <div class="loading-container">
                    <div class="loading-icon">üî•üíß</div>
                    <h2>–û–≥–æ–Ω—å –∏ –í–æ–¥–∞</h2>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</p>
                    <p><small>–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞</small></p>
                </div>
            </body>
            </html>
        `);
    } else {
        alert('–ò–≥—Ä–∞ "–û–≥–æ–Ω—å –∏ –í–æ–¥–∞" –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è! üéÆ\n\n(–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è –∏–≥—Ä–∞)');
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞
class MovieRoulette {
    constructor() {
        this.wheel = document.getElementById('wheel');
        this.spinBtn = document.getElementById('spinBtn');
        this.result = document.getElementById('result');
        this.isSpinning = false;

        this.genres = [
            { name: '–ë–æ–µ–≤–∏–∫', color: '#ff6b6b', icon: 'üí•', id: 'action' },
            { name: '–ö–æ–º–µ–¥–∏—è', color: '#feca57', icon: 'üòÇ', id: 'comedy' },
            { name: '–î—Ä–∞–º–∞', color: '#48dbfb', icon: 'üé≠', id: 'drama' },
            { name: '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', color: '#1dd1a1', icon: 'üöÄ', id: 'sci-fi' },
            { name: '–£–∂–∞—Å—ã', color: '#ff9ff3', icon: 'üëª', id: 'horror' },
            { name: '–†–æ–º–∞–Ω—Ç–∏–∫–∞', color: '#fd79a8', icon: 'üíï', id: 'romance' },
            { name: '–¢—Ä–∏–ª–ª–µ—Ä', color: '#a29bfe', icon: 'üî™', id: 'thriller' },
            { name: '–î–µ—Ç–µ–∫—Ç–∏–≤', color: '#ffeaa7', icon: 'üîç', id: 'mystery' }
        ];

        this.moviesDatabase = {
            'action': [
                { title: '–î–∂–æ–Ω –£–∏–∫ 4', year: 2023, rating: 7.7, duration: 169, description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –Ω–∞–µ–º–Ω–∏–∫ –î–∂–æ–Ω –£–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –ü—Ä–µ—Å—Ç—É–ø–Ω—ã–º –º–∏—Ä–æ–º.' },
                { title: '–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞ 7', year: 2023, rating: 7.8, duration: 164, description: '–ò—Ç–∞–Ω –•–∞–Ω—Ç –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å —Å–∞–º–æ–π –æ–ø–∞—Å–Ω–æ–π –º–∏—Å—Å–∏–µ–π.' },
                { title: '–ë–µ–∑—É–º–Ω—ã–π –ú–∞–∫—Å: –î–æ—Ä–æ–≥–∞ —è—Ä–æ—Å—Ç–∏', year: 2015, rating: 8.1, duration: 120, description: '–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π –±–æ–µ–≤–∏–∫ –≤ –ø—É—Å—Ç—ã–Ω–µ –±—É–¥—É—â–µ–≥–æ.' }
            ],
            'comedy': [
                { title: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', year: 2023, rating: 7.2, duration: 118, description: '–í—Å—Ç—Ä–µ—á–∞ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ —Å–ø—É—Å—Ç—è 20 –ª–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º.' },
                { title: '–î–∂–µ–Ω—Ç–ª—å–º–µ–Ω—ã', year: 2019, rating: 7.8, duration: 113, description: '–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–µ–¥–∏—è –æ –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–º –Ω–∞—Ä–∫–æ–±–∞—Ä–æ–Ω–µ.' },
                { title: '–û—á–µ–Ω—å —Å—Ç—Ä–∞—à–Ω–æ–µ –∫–∏–Ω–æ', year: 2000, rating: 7.1, duration: 88, description: '–ü–∞—Ä–æ–¥–∏—è –Ω–∞ —Ñ–∏–ª—å–º—ã —É–∂–∞—Å–æ–≤.' }
            ],
            'drama': [
                { title: '–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä', year: 2023, rating: 8.3, duration: 180, description: '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–æ–º–Ω–æ–π –±–æ–º–±—ã.' },
                { title: '–ó–µ–ª–µ–Ω–∞—è –∫–Ω–∏–≥–∞', year: 2018, rating: 8.2, duration: 130, description: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∞—Ñ—Ä–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –ø–∏–∞–Ω–∏—Å—Ç–∞ –ø–æ —é–≥—É –°–®–ê.' },
                { title: '–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø', year: 1994, rating: 8.8, duration: 142, description: '–ñ–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞ —Å –Ω–∏–∑–∫–∏–º IQ, –ø–æ–≤–ª–∏—è–≤—à–µ–≥–æ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é.' }
            ],
            'sci-fi': [
                { title: '–î—é–Ω–∞', year: 2021, rating: 8.0, duration: 155, description: '–≠–ø–∏—á–µ—Å–∫–∞—è —Å–∞–≥–∞ –æ –ø—É—Å—Ç—ã–Ω–Ω–æ–π –ø–ª–∞–Ω–µ—Ç–µ –ê—Ä—Ä–∞–∫–∏—Å.' },
                { title: '–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä', year: 2014, rating: 8.6, duration: 169, description: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ —á–µ—Ä–≤–æ—Ç–æ—á–∏–Ω—É –≤ –ø–æ–∏—Å–∫–∞—Ö –Ω–æ–≤–æ–≥–æ –¥–æ–º–∞.' },
                { title: '–ú–∞—Ç—Ä–∏—Ü–∞', year: 1999, rating: 8.7, duration: 136, description: '–•–∞–∫–µ—Ä —É–∑–Ω–∞–µ—Ç —à–æ–∫–∏—Ä—É—é—â—É—é –ø—Ä–∞–≤–¥—É –æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.' }
            ],
            'horror': [
                { title: '–ü—Ä–æ—á—å', year: 2017, rating: 7.7, duration: 104, description: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ö–æ—Ä—Ä–æ—Ä –æ –≤–∏–∑–∏—Ç–µ –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º –¥–µ–≤—É—à–∫–∏.' },
                { title: '–•—ç–ª–ª–æ—É–∏–Ω', year: 2018, rating: 6.5, duration: 106, description: '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ú–∞–π–∫–ª–∞ –ú–∞–π–µ—Ä—Å–∞.' },
                { title: '–†–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—è', year: 2022, rating: 7.1, duration: 122, description: '–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö–æ—Ä—Ä–æ—Ä –æ –Ω–∞—Å–ª–µ–¥–∏–∏ —Å–µ–º—å–∏.' }
            ],
            'romance': [
                { title: '–¢–∏—Ç–∞–Ω–∏–∫', year: 1997, rating: 7.9, duration: 195, description: '–õ—é–±–æ–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞ —Ñ–æ–Ω–µ –∫—Ä—É—à–µ–Ω–∏—è –ª–∞–π–Ω–µ—Ä–∞.' },
                { title: '–õ–∞-–õ–∞ –õ–µ–Ω–¥', year: 2016, rating: 8.0, duration: 128, description: '–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –¥—Ä–∞–º–∞ –≤ –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å–µ.' },
                { title: '–í–µ–ª–∏–∫–∏–π –ì—ç—Ç—Å–±–∏', year: 2013, rating: 7.2, duration: 143, description: '–≠–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–æ–º–∞–Ω–∞ –§–∏—Ü–¥–∂–µ—Ä–∞–ª—å–¥–∞.' }
            ],
            'thriller': [
                { title: '–ò–≥—Ä–∞', year: 1997, rating: 7.8, duration: 129, description: '–ë–∞–Ω–∫–∏—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–ø–∞—Å–Ω—É—é –∏–≥—Ä—É.' },
                { title: '–°–µ–º—å', year: 1995, rating: 8.6, duration: 127, description: '–î–µ—Ç–µ–∫—Ç–∏–≤—ã —Ä–∞—Å—Å–ª–µ–¥—É—é—Ç —Å–µ—Ä–∏—é —É–±–∏–π—Å—Ç–≤.' },
                { title: '–ú–æ–ª—á–∞–Ω–∏–µ —è–≥–Ω—è—Ç', year: 1991, rating: 8.6, duration: 118, description: '–°—Ç–∞–∂–µ—Ä–∫–∞ –§–ë–† –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç—Å—è —Å —Å–µ—Ä–∏–π–Ω—ã–º —É–±–∏–π—Ü–µ–π.' }
            ],
            'mystery': [
                { title: '–î–æ—Å—Ç–∞—Ç—å –Ω–æ–∂–∏', year: 2019, rating: 7.9, duration: 131, description: '–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ä—Ç–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è.' },
                { title: '–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å', year: 2009, rating: 7.6, duration: 128, description: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞.' },
                { title: '–î–µ–ª–æ —Ö—Ä–∞–±—Ä—ã—Ö', year: 2017, rating: 7.1, duration: 134, description: '–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∂–∞—Ä–∞ –≤ —Ü–µ—Ä–∫–≤–∏.' }
            ]
        };

        this.init();
    }

    init() {
        this.createWheel();
        this.setupEventListeners();
        this.updateYearDisplay();
    }

    createWheel() {
        this.wheel.innerHTML = '';
        const segmentAngle = 360 / this.genres.length;

        this.genres.forEach((genre, index) => {
            const segment = document.createElement('div');
            segment.className = 'wheel-segment';
            segment.style.transform = `rotate(${index * segmentAngle}deg)`;
            segment.style.background = `conic-gradient(from ${index * segmentAngle}deg to ${(index + 1) * segmentAngle}deg, ${genre.color}, ${genre.color}dd)`;

            const content = document.createElement('div');
            content.className = 'wheel-segment-content';
            content.innerHTML = `
                <span class="segment-icon">${genre.icon}</span>
                <div class="segment-text">${genre.name}</div>
            `;

            segment.appendChild(content);
            segment.dataset.genre = genre.id;
            this.wheel.appendChild(segment);
        });
    }

    setupEventListeners() {
        this.spinBtn.addEventListener('click', () => this.spinWheel());

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.querySelectorAll('.genre-tag').forEach(tag => {
            tag.addEventListener('click', (e) => {
                e.preventDefault();
                if (tag.dataset.genre === 'all') {
                    document.querySelectorAll('.genre-tag').forEach(t => t.classList.remove('active'));
                    tag.classList.add('active');
                } else {
                    document.querySelector('.genre-tag[data-genre="all"]').classList.remove('active');
                    tag.classList.toggle('active');
                }
            });
        });

        document.getElementById('yearSlider').addEventListener('input', (e) => {
            document.getElementById('yearValue').textContent = e.target.value;
        });
    }

    updateYearDisplay() {
        const slider = document.getElementById('yearSlider');
        const valueDisplay = document.getElementById('yearValue');
        valueDisplay.textContent = slider.value;
    }

    spinWheel() {
        if (this.isSpinning) return;

        this.isSpinning = true;
        this.result.innerHTML = '';

        const spinText = this.spinBtn.querySelector('.spin-text');
        const spinningText = this.spinBtn.querySelector('.spinning-text');

        spinText.style.display = 'none';
        spinningText.style.display = 'block';
        this.spinBtn.disabled = true;

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        const spins = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        const segmentAngle = 360 / this.genres.length;
        const randomSegment = Math.floor(Math.random() * this.genres.length);
        const stopAngle = spins * 360 + (360 - randomSegment * segmentAngle - segmentAngle / 2);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.wheel.style.transform = `rotate(${-stopAngle}deg)`;
        this.wheel.style.transition = `transform 4s cubic-bezier(0.2, 0.8, 0.3, 1)`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            const winningGenre = this.genres[randomSegment];
            this.showResult(winningGenre);

            spinText.style.display = 'block';
            spinningText.style.display = 'none';
            this.spinBtn.disabled = false;
            this.isSpinning = false;
        }, 4200);
    }

    showResult(genre) {
        const movies = this.moviesDatabase[genre.id];
        const randomMovie = movies[Math.floor(Math.random() * movies.length)];

        const resultHTML = `
            <div class="result-card">
                <div style="margin-bottom: 1.5rem;">
                    <div style="font-size: 3rem; margin-bottom: 0.5rem;">${genre.icon}</div>
                    <h3 style="color: ${genre.color}; margin-bottom: 0.5rem;">${genre.name}</h3>
                    <p style="color: var(--text-secondary);">–ü–æ–¥–æ–±—Ä–∞–Ω —Ñ–∏–ª—å–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</p>
                </div>

                <div class="movie-details">
                    <div class="movie-poster-small">
                        ${genre.icon}
                    </div>
                    <div class="movie-info">
                        <div class="movie-title">${randomMovie.title}</div>
                        <div class="movie-meta">
                            <span>‚≠ê ${randomMovie.rating}/10</span>
                            <span>üìÖ ${randomMovie.year}</span>
                            <span>‚è± ${randomMovie.duration} –º–∏–Ω</span>
                        </div>
                        <div class="movie-description">${randomMovie.description}</div>
                    </div>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem;">
                    <button class="btn btn-primary" onclick="roulette.addToCollection('${randomMovie.title}', '${genre.name}')">
                        –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    </button>
                    <button class="btn btn-outline" onclick="roulette.spinWheel()">
                        –ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </div>
        `;

        this.result.innerHTML = resultHTML;

        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        setTimeout(() => {
            this.result.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 100);
    }

    addToCollection(movie, genre) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º
        alert(`–§–∏–ª—å–º "${movie}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = document.querySelectorAll('.user-stat .stat-value');
        if (stats[0]) {
            stats[0].textContent = parseInt(stats[0].textContent) + 1;
        }
    }

    getSelectedGenres() {
        const selectedTags = document.querySelectorAll('.genre-tag.active');
        if (selectedTags.length === 0) return this.genres.map(g => g.id);

        const selectedGenres = Array.from(selectedTags).map(tag => tag.dataset.genre);
        return selectedGenres.includes('all') ? this.genres.map(g => g.id) : selectedGenres;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let roulette;

document.addEventListener('DOMContentLoaded', () => {
    roulette = new MovieRoulette();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    showPage('home');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –∏–≥—Ä—ã
    document.querySelector('.btn-fire').addEventListener('click', playGame);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î
class MovieRouletteAPI {
    static async getUserProfile() {
        return {
            name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            email: 'ivan@example.com',
            preferences: ['comedy', 'sci-fi'],
            watchedMovies: 24,
            averageRating: 8.2
        };
    }

    static async savePreferences(preferences) {
        console.log('Preferences saved:', preferences);
        return { success: true };
    }

    static async getRecommendedMovie(filters) {
        return {
            title: '–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞',
            genre: filters.genres[0],
            rating: 8.5,
            year: 2023,
            duration: 120
        };
    }
}
